name: Auto Mirror Release

on:
  schedule:
    - cron: '0 0 */1 * *'  
  workflow_dispatch:

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current version
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get stored version
      id: get_version
      run: |
        if [ -f version.txt ]; then
          echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV
        else
          echo "CURRENT_VERSION=v0.0.0" >> $GITHUB_ENV
        fi

    - name: Fetch latest release
      id: fetch_release
      env: 
        TARGET_REPO: "CherryHQ/cherry-studio"
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        LATEST=$(curl -sH "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/releases/latest" | jq -r .tag_name)
        echo "LATEST_VERSION=$LATEST" >> $GITHUB_ENV
        echo "Latest version: $LATEST"

    - name: Process new release
      if: env.LATEST_VERSION != env.CURRENT_VERSION
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        # 创建临时目录
        mkdir -p temp
        cd temp
        
        # 下载exe文件
        curl -sH "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/CherryHQ/cherry-studio/releases/latest" | \
          jq -r '.assets[] | select(.name | endswith("-portable.exe")).browser_download_url' | \
          while read url; do
            wget -q "$url"
          done

        ls .
        # 压缩文件
        for exe in *.exe; do
          [ -f "$exe" ] || continue
          zip "${exe%.exe}.zip" "$exe"
        done

        # 移动zip文件到主目录
        mv *.zip ..
        cd ..
        rm -rf temp

        # 更新版本记录
        echo "$LATEST_VERSION" > version.txt

        find . -name "*.zip" -type f | grep -v -- "-${VERSION}-portable\.zip$" | xargs -r rm -f

        # 提交变更
        git config --global user.name "LiuKay"
        git config --global user.email "passionno1@qq.com"
        git add -A
        git commit -m "Mirror release $LATEST_VERSION"
        git push

    - name: Create Release
      if: env.LATEST_VERSION != env.CURRENT_VERSION
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ env.LATEST_VERSION }}
        name: "Mirror Release ${{ env.LATEST_VERSION }}"
        body: "Mirrored from CherryHQ/cherry-studio ${{ env.LATEST_VERSION }}"
        files: "*.zip"
